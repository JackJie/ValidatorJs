// Generated by CoffeeScript 1.6.3
(function() {
  var $, check, checkAll, checkable, defalutConfig, findByName, getLength, getValidItem, removeError, showError;

  $ = jQuery;

  checkable = function(element) {
    return /radio|checkbox/i.test(element.type);
  };

  findByName = function(name) {
    return $('.form_mc').find("[name='" + name + "']");
  };

  getLength = function(value, element) {
    switch (element.nodeName.toLowerCase()) {
      case "select":
        return $("option:selected", element).length;
      case "input":
        if (this.checkable(element)) {
          return findByName(element.name).filter(":checked").length;
        }
    }
    return value.length;
  };

  getValidItem = function(names, form, callback) {
    var item, k, v;
    for (k in names) {
      v = names[k];
      item = $('[name=' + k + ']', form);
      if (item.length) {
        callback && callback(item, k, v);
      }
    }
  };

  checkAll = function(opts) {
    var arr, form, names;
    names = opts.identifie;
    form = opts.form;
    arr = [];
    getValidItem(names, form, function(item, k, v) {
      if (!check(item, v, opts)) {
        arr.push(v);
      }
    });
    return arr.length === 0;
  };

  check = function(elem, valid, opts) {
    var k, method, res, v;
    elem = elem[0];
    for (k in valid) {
      v = valid[k];
      method = $.validateRules[k];
      if (method) {
        res = method(elem.value, elem, v);
        if (!res) {
          showError(elem.name, k, opts);
          return res;
        } else {
          removeError(elem.name, k, opts);
        }
      }
    }
    return res;
  };

  showError = function(name, k, opts) {
    var errWrap, item;
    item = $('[name='+ name +']', opts.form);
    errWrap = $('[data-errwrap=' + name + ']');
    item.addClass(opts.klass);
    if (errWrap.length) {
      errWrap.addClass(opts.klass);
      return;
    }
    errWrap = $('<'+ opts.errElem +' data-errwrap='+name+' class="'+opts.klass+'">'+ opts.message[name][k] +'</'+ opts.errElem +'>');
    item.parents('li').append(errWrap);
  };

  removeError = function(name, k, opts) {
    var errWrap, item;
    item = $('[name='+ name +']', opts.form);
    errWrap = $('[data-errwrap=' + name + ']');
    item.removeClass(opts.klass);
    if (!errWrap.length) {
      return;
    }
    errWrap.text('').removeClass(opts.klass);
  };

  $.validateRules = {
    required: function(value, elem, param) {
      if (elem.nodeName.toLowerCase() === 'select') {
        return elem.selectedIndex !== 0;
      }
      if (checkable(elem)) {
        return getLength(value, element) > 0;
      }
      return $.trim(value).length > 0;
    },
    equalTo: function(value, elem, param) {
      var pv;
      param = param.replace('#', '');
      pv = $('[name='+param+']').val();
      return $.trim(pv) === $.trim(value);
    },
    setPwd: function(value, elem, param) {
      var reg;
      reg = /^[x00-x7f]+$/;
      if (!reg.test(value)) {
        return false;
      }
      if (value.length < 6 || value.length > 18) {
        return false;
      }
      return true;
    }
  };

  defalutConfig = {
    identifie: '[required]',
    klass: 'error',
    form: 'form',
    isErrorOnParent: false,
    event: 'blur',
    submit: true,
    isAjaxSubmit: false,
    errElem: 'cite'
  };

  $.fn.simpleValidate = function(opts, callback) {
    var form, identifie, isErrorOnParent, klass, method;
    opts = $.extend({}, defalutConfig, opts);
    form = opts.form;
    identifie = opts.identifie;
    method = opts.method;
    klass = opts.klass;
    isErrorOnParent = opts.isErrorOnParent;
    getValidItem(identifie, form, function(item, k, v) {
      if (checkable(item) || item[0].nodeName.toLowerCase() === 'select') {
        opts.event = 'change blur';
      }
      item.on(opts.event, function() {
        check($(this), v, opts);
      });
    });
    if (opts.submit) {
      $(this).on('click', function() {
        $(form).trigger('submit');
      });
      $(form).submit(function(event) {
        if (opts.debug) {
          event.preventDefault();
          return false;
        }
        return checkAll.call(this, opts);
      });
    } else {
      $(this).on('click', function(event) {
        var checkStata;
        if (opts.debug) {
          event.preventDefault();
          return false;
        }
        checkStata = checkAll.call(this, opts);
        if (checkStata && opts.isAjaxSubmit) {
          callback && callback();
          return checkStata;
        }
      });
    }
  };

}).call(this);
